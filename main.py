from aiogram.types import ParseMode, InputFile
from aiogram import Bot, types, executor, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import *
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import keyboards
import configparser
from WorkingWithDB import DB
from states import FSMUser, FSMAdmin
import GoogleSheets

config = configparser.ConfigParser()
config.read("config.ini")
BOT_TOKEN = config['Telegram']['bot_token']

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    DB.delete_creating_info(external_id=message.from_user.id)
    text = """
–ú—ã ‚Äì –ü—Ä–∞–≤–æ–≤–æ–π –¶–µ–Ω—Ç—Ä ABC. –ù–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞—â–∏—Ç—É –ø—Ä–∞–≤ –≥—Ä–∞–∂–¥–∞–Ω –∏ –∏—Ö –∑–∞–∫–æ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.
–°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ª–≥–∏
‚úîÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É, —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª—É—á–∞–π 
‚úîÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –≤–∞—à–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —É—á–∞—Å—Ç–∏–∏ ‚Äì –º—ã –≤—Å—ë –¥–µ–ª–∞–µ–º —Å–∞–º–∏
‚úîÔ∏è –†–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
‚úîÔ∏è –≠–∫—Å–ø–µ—Ä—Ç—ã —Å–æ —Å—Ç–∞–∂–µ–º –±–æ–ª–µ–µ 5 –ª–µ—Ç

–ù–∞—à –∫–∞–Ω–∞–ª: @bankrotstvo77
–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @denbro888
–ù–∞—à —Å–∞–π—Ç: https://abc-groupe.ru
–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7(988) 503 71 66
    """
    DB.add_new_user(external_id=message.from_user.id,
                    username=message.from_user.username,
                    firstname=message.from_user.first_name,
                    lastname=message.from_user.last_name)
    await bot.send_photo(message.from_user.id,
                         photo=InputFile('images/main.jpg'),
                         caption=text,
                         reply_markup=keyboards.main_kb)

    if DB.has_heal_name(message.from_user.id):
        await bot.send_message(message.from_user.id,
                               text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è',
                               reply_markup=keyboards.ReplyKeyboardRemove())
        await FSMUser.typing_real_name.set()


@dp.message_handler(state=FSMUser.typing_real_name)
async def typing_real_name(message: types.Message):
    real_name = message.text
    DB.add_real_name(external_id=message.from_user.id, real_name=real_name)
    await bot.send_message(
        message.from_user.id,
        text='–°–ø–∞—Å–∏–±–æ\n–ù–∞–∂–º–∏—Ç–µ /help —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        reply_markup=keyboards.ReplyKeyboardRemove())
    await FSMUser.beginning.set()


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message):
    DB.delete_creating_info(external_id=message.from_user.id)
    text = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¶–µ–Ω—Ç—Ä–∞ –ü—Ä–∞–≤–æ–≤–æ–π –ü–æ–º–æ—â–∏ –î–æ–ª–∂–Ω–∏–∫–∞–º üí∏

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:

üí≤–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
‚ÑπÔ∏è –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ
‚ö°–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å online‚ö°"""
    await bot.send_message(message.from_user.id,
                           text=text,
                           reply_markup=keyboards.help_kb)
    await FSMUser.choose_action.set()


@dp.message_handler(lambda c: c.text == '‚ö°–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å online‚ö°',
                    state=FSMUser.choose_action)
async def ask_online(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                           reply_markup=keyboards.ReplyKeyboardRemove())
    await FSMUser.asking_online.set()


@dp.message_handler(state=FSMUser.asking_online)
async def typing_message_online(message: types.Message):
    msg = str(message.text)
    admins = DB.get_all_admins()
    contacts = InlineKeyboardMarkup()
    b = InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
                             callback_data=f'get_info_{message.from_user.id}')
    contacts.add(b)
    for admin in admins:
        await bot.send_message(
            admin,
            text=text(
                msg,
                '\n',
                f'–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}',
            ),
            reply_markup=contacts)


@dp.callback_query_handler(lambda c: 'get_info_' in c.data, state='*')
async def get_info(call: types.CallbackQuery):
    external_id = ''.join(filter(str.isdigit, call.data))
    data = DB.get_contacts_by_id(external_id=external_id)
    await bot.send_message(call.message.chat.id, text=data)


@dp.message_handler(lambda c: c.text == '‚ÑπÔ∏è–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                    state=FSMUser.choose_action)
async def more_info(message: types.Message):
    DB.delete_creating_info(external_id=message.from_user.id)
    text = '''–ú—ã ‚Äì –ü—Ä–∞–≤–æ–≤–æ–π –¶–µ–Ω—Ç—Ä ABC. –ù–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞—â–∏—Ç—É –ø—Ä–∞–≤ –≥—Ä–∞–∂–¥–∞–Ω –∏ –∏—Ö –∑–∞–∫–æ–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.

–°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ª–≥–∏
‚úîÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É, —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª—É—á–∞–π 
‚úîÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –≤–∞—à–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —É—á–∞—Å—Ç–∏–∏ ‚Äì –º—ã –≤—Å—ë –¥–µ–ª–∞–µ–º —Å–∞–º–∏
‚úîÔ∏è –†–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
‚úîÔ∏è –≠–∫—Å–ø–µ—Ä—Ç—ã —Å–æ —Å—Ç–∞–∂–µ–º –±–æ–ª–µ–µ 5 –ª–µ—Ç

–ù–∞—à –∫–∞–Ω–∞–ª: @bankrotstvo77
–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @denbro888
–ù–∞—à —Å–∞–π—Ç: https://abc-groupe.ru
–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (988) 503 71 66'''
    await bot.send_message(message.from_user.id,
                           text=text,
                           reply_markup=keyboards.main_kb)


@dp.message_handler(lambda c: 'üí≤–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é' in c.text,
                    state=FSMUser.choose_action)
async def get_price(message: types.Message):
    DB.delete_creating_info(external_id=message.from_user.id)
    DB.create_info(message.from_user.id)
    await bot.send_message(message.from_user.id,
                           text='–ö–∞–∫–∞—è —É –≤–∞—Å —Å—É–º–º–∞ –¥–æ–ª–≥–∞?',
                           reply_markup=keyboards.debt_kb)
    await FSMUser.choose_debt.set()


@dp.message_handler(lambda c: c.text in keyboards.prices,
                    state=FSMUser.choose_debt)
async def has_debt(message: types.Message):
    credit = message.text
    DB.add_credit(credit=credit, external_id=message.from_user.id)
    await bot.send_message(message.from_user.id,
                           text='–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏?',
                           reply_markup=keyboards.yes_no_kb)
    await FSMUser.choose_expiary.set()


@dp.message_handler(lambda c: c.text in keyboards.yes_no,
                    state=FSMUser.choose_expiary)
async def has_debt(message: types.Message):
    context = message.text
    DB.add_expiary_payment(context=context, external_id=message.from_user.id)
    await bot.send_message(message.from_user.id,
                           text='–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?',
                           reply_markup=keyboards.yes_no_kb)
    await FSMUser.choose_estate.set()


@dp.message_handler(lambda c: c.text in keyboards.yes_no,
                    state=FSMUser.choose_estate)
async def has_estate(message: types.Message):
    context = message.text
    DB.add_estate(context=context, external_id=message.from_user.id)
    await bot.send_message(message.from_user.id,
                           text='–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?',
                           reply_markup=keyboards.yes_no_kb)
    await FSMUser.choose_car.set()


@dp.message_handler(lambda c: c.text in keyboards.yes_no,
                    state=FSMUser.choose_car)
async def has_car(message: types.Message):
    context = message.text
    DB.add_car(context=context, external_id=message.from_user.id)
    await bot.send_message(message.from_user.id,
                           text='–ö–∞–∫–æ–π —É –≤–∞—Å –¥–æ—Ö–æ–¥?',
                           reply_markup=keyboards.salary_kb)
    await FSMUser.choose_salary.set()


@dp.message_handler(lambda c: c.text in keyboards.salary,
                    state=FSMUser.choose_salary)
async def check_salary(message: types.Message):
    context = message.text
    DB.add_salary(context=context, external_id=message.from_user.id)
    await bot.send_message(message.from_user.id,
                           text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                           reply_markup=keyboards.marital_status_kb)
    await FSMUser.choose_marital_status.set()


@dp.message_handler(lambda c: c.text in keyboards.marital,
                    state=FSMUser.choose_marital_status)
async def check_marital_status(message: types.Message):
    context = message.text
    order_id = DB.get_last_index(message.from_user.id)
    DB.add_marital_status(context=context, external_id=message.from_user.id)
    flag = DB.has_phone(message.from_user.id)
    if flag:
        await bot.send_message(message.from_user.id,
                               text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                               reply_markup=keyboards.ReplyKeyboardRemove())
        await FSMUser.type_phone.set()
    else:
        DB.finish_info(external_id=message.from_user.id)
        await bot.send_message(
            message.from_user.id,
            text=text(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            ),
            reply_markup=keyboards.help_kb)
        GoogleSheets.update()
        await FSMUser.beginning.set()
        admins = DB.get_all_admins()
        m = DB.get_info_by_id(order_id)
        for admin in admins:
            await bot.send_message(
                admin,
                text=text(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑\n{m}', ),
                reply_markup=keyboards.ReplyKeyboardRemove())


@dp.message_handler(state=FSMUser.type_phone)
async def type_phone(message: types.Message):
    phone = message.text
    order_id = DB.get_last_index(message.from_user.id)
    if (str(phone)).isalpha():
        await bot.send_message(message.from_user.id,
                               text='–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                               reply_markup=keyboards.ReplyKeyboardRemove())
        await FSMUser.type_phone.set()
        return

    DB.add_phone(phone, message.from_user.id)
    DB.finish_info(external_id=message.from_user.id)
    await bot.send_message(
        message.from_user.id,
        text=text(
            '–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        ),
        reply_markup=keyboards.help_kb)
    GoogleSheets.update()
    await FSMUser.beginning.set()
    admins = DB.get_all_admins()
    m = DB.get_info_by_id(order_id)
    for admin in admins:
        await bot.send_message(admin,
                               text=text(
                                   f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑\n{m}', ),
                               reply_markup=keyboards.ReplyKeyboardRemove())


@dp.message_handler(commands=['run_admin_menu'], state='*')
async def run_admin_menu(message: types.Message):
    if DB.check_admin(message.from_user.id):
        await bot.send_message(message.from_user.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n',
                               reply_markup=keyboards.admin_panel_kb)
        await FSMAdmin.choosing_actions.set()


@dp.message_handler(lambda c: c.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤',
                    state=FSMAdmin.choosing_actions)
async def get_all_orders(message: types.Message):
    data = DB.get_all_infos()
    await bot.send_message(message.from_user.id,
                           text=data,
                           reply_markup=keyboards.ReplyKeyboardRemove())


@dp.callback_query_handler(lambda c: c.data == 'main', state='*')
async def main(call: types.CallbackQuery):
    DB.delete_creating_info(external_id=call.from_user.id)
    text = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¶–µ–Ω—Ç—Ä–∞ –ü—Ä–∞–≤–æ–≤–æ–π –ü–æ–º–æ—â–∏ –î–æ–ª–∂–Ω–∏–∫–∞–º üí∏

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:

üí≤–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
‚ÑπÔ∏è –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ
‚ö°–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å online‚ö°
"""
    await bot.send_message(call.from_user.id,
                           text=text,
                           reply_markup=keyboards.help_kb)
    await FSMUser.choose_action.set()


if __name__ == '__main__':
    print('started')
    DB.delete_creating_info
    executor.start_polling(dp, skip_updates=False)
